#include <M5Core2.h> 
#include "NimBLEDevice.h"


// BLE 
NimBLEAdvertisedDevice device;
NimBLEClient *pClient_bb, *pClient_sp;
NimBLERemoteService *pService_bb, *pService_sp;
NimBLERemoteCharacteristic *pReceiver_bb, *pReceiver_sp;


void notifyCB_bb(NimBLERemoteCharacteristic* pRemoteCharacteristic, uint8_t* pData, size_t length, bool isNotify){
  int i;
  
  Serial.print("Blueboard: ");
  for (i = 0; i < length; i++) {
    Serial.print(pData[i], HEX);
    Serial.print(" ");
  }
  Serial.println();

  M5.Lcd.fillRect(0, 40,320, 20, TFT_BLACK);
  M5.Lcd.setCursor(0,40);
  M5.Lcd.println("BLUEBOARD");
  for (i = 0; i < length; i++) {
    M5.Lcd.print(pData[i], HEX);
    M5.Lcd.print(" ");
  }
}


void notifyCB_sp(NimBLERemoteCharacteristic* pRemoteCharacteristic, uint8_t* pData, size_t length, bool isNotify){
  int i;

  Serial.print("Spark: ");
  for (i = 0; i < length; i++) {
    Serial.print(pData[i], HEX);
    Serial.print(" ");
  }
  Serial.println();

  M5.Lcd.fillRect(0,80,320, 160, TFT_BLACK);
  M5.Lcd.setCursor(0,80);
  M5.Lcd.println("SPARK");
  for (i = 0; i < length; i++) {
    M5.Lcd.print(pData[i], HEX);
    M5.Lcd.print(" ");
  }
}


bool connected_bb, connected_sp;

void setup() {
  // put your setup code here, to run once:
  M5.begin();
  M5.Lcd.fillScreen(TFT_BLACK);
  M5.Lcd.setTextSize(2);
  M5.Lcd.println("      Spark BlueBoard");

  M5.Lcd.setCursor(0,20);
  M5.Lcd.println("CONNECTED?");
  
  Serial.println("Started");

  connected_bb = false;
  connected_sp = false;
  int i;
  
  NimBLEDevice::init("");

  while (!connected_bb || !connected_sp) {
    NimBLEDevice::init("");
  
    NimBLEScan *pScan = NimBLEDevice::getScan();
    NimBLEScanResults results = pScan->start(4);

    NimBLEUUID BBserviceUuid("03b80e5a-ede8-4b33-a751-6ce34ec4c700"); // service for iRig Blueboard MIDI mode 
    NimBLEUUID SPserviceUuid("ffc0"); // service for Spark  
    // NimBLEUUID SPserviceUuid("1811"); // service for tester      
  
    Serial.println("**********************************************************");
    for(i = 0; i < results.getCount() && (!connected_bb || !connected_sp); i++) {
      device = results.getDevice(i);

      // Print info
      Serial.print("Name ");
      Serial.print(device.getName().c_str());
      Serial.print(" : ");

      if (strcmp(device.getName().c_str(),"iRig BlueBoard") == 0) {
        Serial.print("Found BlueBoard by name - trying to connect....");
        pClient_bb = NimBLEDevice::createClient();
        if(pClient_bb->connect(&device)) {
          connected_bb = true;
          Serial.println("connected");
          M5.Lcd.setCursor(130,20);
          M5.Lcd.println("BLUEBD");
        }
      }
      
      // else if (strcmp(device.getName().c_str(),"Alert Notification") == 0) {
      //   Serial.print("Found Spark by name - trying to connect....");
      else if (device.isAdvertisingService(SPserviceUuid)) {
        pClient_sp = NimBLEDevice::createClient();
        if(pClient_sp->connect(&device)) {
          connected_sp = true;
          Serial.println("connected");
          M5.Lcd.setCursor(230,20);
          M5.Lcd.println("SPARK");
        }
      }
      else
        Serial.println();
    }

    // Get the services
  
    if (connected_bb) {
      pService_bb = pClient_bb->getService(BBserviceUuid);
      if (pService_bb != nullptr) {
        pReceiver_bb = pService_bb->getCharacteristic("7772e5db-3868-4112-a1a9-f2669d106bf3");
        if (pReceiver_bb && pReceiver_bb->canNotify()) {
          if (!pReceiver_bb->subscribe(true, notifyCB_bb, true)) {
            connected_bb = false;
            pClient_bb->disconnect();
          }
        }
      }
    }
    
    
    if (connected_sp) {
      pService_sp = pClient_sp->getService(SPserviceUuid);
      if (pService_sp != nullptr) {
        // pReceiver_sp = pService_sp->getCharacteristic("2a46");
        pReceiver_sp = pService_sp->getCharacteristic("ffc2");
        if (pReceiver_sp && pReceiver_sp->canNotify()) {
          if (!pReceiver_sp->subscribe(true, notifyCB_sp, true)) {
            connected_sp = false;
            pClient_sp->disconnect();
          }
        }
      }
    }
  }
}


void loop() {
  // put your main code here, to run repeatedly:

  M5.update();
}
